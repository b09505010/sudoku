#include<stdio.h>
#include<stdlib.h>


void print_array(int *);
void stoku(int *,int );
int check_row(int,int*,int);
int check_line(int,int*,int);
int check_rec(int,int*,int);

int main(){
    int ques[81]={
    5,3,0,0,7,0,0,0,0,
    6,0,0,1,9,5,0,0,0,
    0,9,8,0,0,0,0,6,0,
    8,0,0,0,6,0,0,0,3,
    4,0,0,8,0,3,0,0,1,
    7,0,0,0,2,0,0,0,6,
    0,6,0,0,0,0,2,8,0,
    0,0,0,4,1,9,0,0,5,
    0,0,0,0,8,0,0,7,9
    };
stoku(ques,0);
print_array(ques);
}

void print_array(int *a){
    for(int i=0;i<9;i++){
        for(int p=0;p<9;p++)
            {
                printf("%d",a[9*i+p]);
                printf(" ");
            }
        printf("\n");
    }
}
void stoku(int *array,int pointer){
    int pointer_=pointer;
    for(;;){
        if(array[pointer_]!=0)
            {
                pointer_++;
            }
        else
            break;
    }
    for(int i=1;i<=9;i++){
        if(check_row(i,array,pointer_));
            if(check_line(i,array,pointer_));
                if(check_rec(i,array,pointer_)){
                    array[pointer_]=i;
                    stoku(array,pointer_);
                }
    }





}
// a:待確認值 b:數獨陣列 c:目前待確認陣列元素位置
int check_row(int a,int*b,int c){   //確認行
    int c_num=(c%9); 
    int c_num2=c/9;
    if(c_num2==0)
        return 1;
    else
        for(int i=c_num;i<c;i=i+9)
            {
                if(b[c_num]==a)
                    return 0;
            }
    return 1;
}
int check_line(int a,int*b,int c){   //確認列
    int c_num=(c%9);
    if(c_num==0)
        return 1;
    else
    {
       for(int i=c;i>0;i--){
           if(a==b[c-i])
                return 0;
       }
    }
    return 1;
}
int check_rec(int a,int *b,int c){   //確認小方塊
int where_x;
int where_y;
if(c%9<=2)
    where_x=1;
else if(c%9<=5)
    where_x=2;
else 
    where_x=3;
if(c/9<=2)
    where_y=1;
else if(c/9<=5)
    where_y=2;
else 
    where_y=3;
int c_p=(((where_y-1)*9)+((where_x-1)*3));
    for(int i=0;i<3;i++)
        for(int p=0;p<3;p++){
            if(b[c_p+(i*9)+(p)]==a)
                return 0;
        }
    return 1;
}
